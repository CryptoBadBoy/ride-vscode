{
    "information_for_contributors": [
        "None"
    ],
    "version": "",
    "name": "Ride",
    "scopeName": "source.ride",
    "patterns": [
        {
          "name": "keyword.ride",
          "match": "\\b(this|let|if|then|else|ifelse|match|case|base64|base58|func)\\b"
        },
        {
          "name": "entity.name.function.ride",
          "match": "\\b(keccak256|blake2b256|sha256|sigVerify|toBase58String|fromBase58String|toBase64String|fromBase64String|transactionById|addressFromRecipient|addressFromString|addressFromPublicKey|wavesBalance|assetBalance|getInteger|getBoolean|getBinary|getString|getInteger|getBoolean|getBinary|getString|getInteger|getBoolean|getBinary|getString|fraction|size|toBytes|take|drop|takeRight|dropRight|toString|isDefined|extract|throw|height|tx)\\b"
        },
        {
            "name": "entity.name.type.ride",
            "match": "\\b(Transaction|WriteSet|TransferSet|TransferTransaction|IssueTransaction|ReissueTransaction|BurnTransaction|LeaseTransaction|LeaseCancelTransaction|MassTransferTransaction|CreateAliasTransaction|SetScriptTransaction|SponsorFeeTransaction|ExchangeTransaction|DataTransaction|SetAssetScriptTransaction)\\b"
        },
        {
            "name": "markup.bold.ride entity.name.type.ride",
            "match": "{-#(.*)#-}"
        },
        {
            "name": "markup.bold.ride entity.other.attribute-name.ride",
            "match": "@(Verifier|Callable)"
        },
        {
            "name": "markup.italic.ride entity.name.type.ride",
            "match": "\\b(Address|Alias|Transfer|Order|DataEntry|GenesisTransaction|PaymentTransaction)\\b"
        },
        {
            "include": "#qstring-single"
        },
        {
            "include": "#qstring-double"
        },
        {
            "include": "#boolean"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#numbers"
        }
       
    ],
    "repository": {
		"qstring-double": {
			"name": "string.quoted.double.ride",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.ride"
				}
			},
			"end": "(\")|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.ride"
				},
				"2": {
					"name": "invalid.illegal.newline.ride"
				}
			}
		},
		"qstring-single": {
			"name": "variable.parameter ",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.ride"
				}
			},
			"end": "(\\')|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.ride"
				},
				"2": {
					"name": "invalid.illegal.newline.ride"
				}
			}
		},
        "boolean": {
            "patterns": [
                {
                    "match": "\\b(true|false)\\b",
                    "name": "constant.language.ride"
                }
            ]
        },   
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.ride",
                    "begin": "#",
                    "end": "\\n"
                }
            ]
        },
        "numbers": {
			"patterns": [
				
				{
					"match": "\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)",
					"name": "constant.numeric.octal.ride"
				},
				{
					"match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)",
					"name": "constant.numeric.decimal.ride"
				}
			]
		}
    }
}
